set quiet
export DEBUG_PREFIX := "just_debug"

[group("Podman")]
[doc("List all available commands.")]
default:
  just --list --unsorted

[group("Services")]
[doc("Launch ephemeral environment")]
start STATE="persistent":
  #!/usr/bin/env bash
  short_date=$(/bin/date +%m%d%y)
  exec {BASH_XTRACEFD}>>"$DEBUG_PREFIX.$short_date".log
  set -euxo pipefail
  trap just stop SIGHUP SIGINT SIGQUIT SIGTERM
  just startvm

  ENVDIR="/root/env"
  if [ "{{STATE}}" = "ephemeral" ]; then
    ENVDIR="/tmp/testenv"
  fi
  LOGDIR="$ENVDIR/log"

  logdir=$(just podcmd "if [ ! -d $LOGDIR ]; then echo 'true'; fi")
  if [ "$logdir" = "true" ]; then
    # Create the log directory
    just podcmd "mkdir -p $LOGDIR"
  fi

  BITCOIND_LOG="$LOGDIR/bitcoin.log"
  ESPLORA_LOG="$LOGDIR/esplora.log"
  FBBE_LOG="$LOGDIR/fbbe.log"

  # Start the bitcoin daemon
  just podcmd "bitcoind --daemonwait --datadir=$ENVDIR --chain=regtest --txindex --blockfilterindex --peerblockfilters --rpcbind=0.0.0.0 --rpcallowip=0.0.0.0/0 --rpcport=18443 --rest -debuglogfile=$BITCOIND_LOG 2>&1"

  # Start the blockchain explorer
  just podcmd "fbbe --network regtest --local-addr 0.0.0.0:3003 >> $FBBE_LOG 2>&1 &"

  # Start the Esplora and Electrum services
  just podcmd "electrs -vvvv --daemon-dir $ENVDIR --db-dir $ENVDIR --http-addr 0.0.0.0:3002 --electrum-rpc-addr 0.0.0.0:60401 --network=regtest --lightmode >> $ESPLORA_LOG 2>&1 &"
  sleep 10

[group("Services")]
[doc("Get path to services state directory")]
envpath:
  #!/usr/bin/env bash
  short_date=$(/bin/date +%m%d%y)
  exec {BASH_XTRACEFD}>>"$DEBUG_PREFIX.$short_date".log
  set -euxo pipefail

  ENVDIR="/tmp/testenv"
  testenv=$(just podcmd "if [ -d $ENVDIR ]; then echo 'true'; fi")
  if [ "$testenv" = "true" ]; then
    echo $ENVDIR
  else
    echo "/root/env"
  fi


[group("Bitcoin Core")]
[doc("Print the current session cookie to console.")]
cookie:
  just podcmd "cat $(just envpath)/regtest/.cookie | cut -d ':' -f2"

[group("Bitcoin Core")]
[doc("Mine a block, or mine <BLOCKS> number of blocks.")]
mine BLOCKS="1" ADDRESS="bcrt1q6gau5mg4ceupfhtyywyaj5ge45vgptvawgg3aq":
  just cli generatetoaddress {{BLOCKS}} {{ADDRESS}}

[group("Bitcoin Core")]
[doc("Send mining reward to <ADDRESS>")]
sendminingrewardto ADDRESS:
  just cli generatetoaddress 1 {{ADDRESS}}

[group("Bitcoin Core")]
[doc("Send a command to bitcoin-cli")]
[positional-arguments]
cli COMMAND *ARGS:
  #!/usr/bin/env bash
  short_date=$(/bin/date +%m%d%y)
  exec {BASH_XTRACEFD}>>"$DEBUG_PREFIX.$short_date".log
  set -euxo pipefail
  bitcoin-cli --chain=regtest --rpcuser=__cookie__ --rpcpassword=$(just cookie) {{COMMAND}} {{ARGS}}

[group("Logs")]
[doc("Print all logs to console.")]
logs:
  podman --connection regtest logs RegtestBitcoinEnv

[group("Logs")]
[doc("Print bitcoin daemon logs to console.")]
bitcoindlogs:
  just podcmd "tail -f $(just envpath)/log/bitcoin.log"

[group("Logs")]
[doc("Print Esplora logs to console.")]
esploralogs:
  just podcmd "tail -f $(just envpath)/log/esplora.log"

[group("Logs")]
[doc("Print block explorer logs to console.")]
explorerlogs:
  just podcmd "tail -f $(just envpath)/log/fbbe.log"

[group("Podman")]
[doc("Start your podman machine and regtest environment.")]
startvm:
  #!/usr/bin/env bash
  short_date=$(/bin/date +%m%d%y)
  exec {BASH_XTRACEFD}>>"$DEBUG_PREFIX.$short_date".log
  set -euxo pipefail
  containers_running=$(podman machine ls --format json | jq -r .[0].Running)
  if [ "$containers_running" = "true" ]; then
    echo "Container is running"
    exit
  fi
  podman machine start regtest | tail -n1
  podman --connection regtest start RegtestBitcoinEnv

[group("Podman")]
[doc("Stop your podman machine and running environment.")]
stop:
  #!/usr/bin/env bash
  short_date=$(/bin/date +%m%d%y)
  exec {BASH_XTRACEFD}>>"$DEBUG_PREFIX.$short_date".log
  set -uxo pipefail
  echo "Stopping container"

  just podcmd "rm -rf /tmp/testenv"

  containers_running=$(podman machine ls --format json | jq -r .[0].Running)
  if [ "$containers_running" = "false" ]; then
    echo "Container is not running"
  else
    just cli stop
    podman --connection regtest stop RegtestBitcoinEnv
  fi
  podman machine stop regtest

[group("Podman")]
[doc("Enter the shell in the pod.")]
podshell:
  podman --connection regtest exec -it RegtestBitcoinEnv /bin/bash

[group("Podman")]
[doc("Execute command inside pod.")]
podcmd *ARGS="":
  #!/usr/bin/env bash
  short_date=$(/bin/date +%m%d%y)
  exec {BASH_XTRACEFD}>>"$DEBUG_PREFIX.$short_date".log
  set -euxo pipefail

  containers_running=$(podman machine ls --format json | jq -r .[0].Running)
  if [ "$containers_running" = "false" ]; then
    echo "Container is not running"
  else
    podman --connection regtest exec RegtestBitcoinEnv /bin/bash -c '{{ARGS}}'
  fi

[group("Podman")]
[doc("Open the block explorer.")]
explorer:
  open http://127.0.0.1:3003

[group("Docs")]
[doc("Serve the local docs.")]
servedocs:
  mkdocs serve

[group("Docs")]
[doc("Open the website for docs.")]
docs:
  open https://thunderbiscuit.github.io/regtest-in-a-pod/

[group("Default Wallet")]
[doc("Create a default wallet.")]
createwallet:
  just cli createwallet podmanwallet
  just cli -rpcwallet=podmanwallet settxfee 0.0001

[group("Default Wallet")]
[doc("Print an address from the default wallet.")]
newaddress:
  just cli -rpcwallet=podmanwallet getnewaddress

[group("Default Wallet")]
[doc("Print the balance of the default wallet.")]
walletbalance:
  just cli -rpcwallet=podmanwallet getbalance

[group("Default Wallet")]
[doc("Send 1 bitcoin to <ADDRESS> using the default wallet.")]
sendto ADDRESS:
  just cli -rpcwallet=podmanwallet sendtoaddress {{ADDRESS}} 1

[group("BDK")]
[doc("Generate and store external and internal descriptors")]
bdk_init:
  #!/usr/bin/env bash
  short_date=$(/bin/date +%m%d%y)
  exec {BASH_XTRACEFD}>>"$DEBUG_PREFIX.$short_date".log
  set -euxo pipefail
  KEYS=$(cargo -q run --bin example_electrum generate) && \
  echo $KEYS | jq -r ".private_internal_descriptor" | tee /tmp/.bdk_descriptor
  echo $KEYS | jq -r ".private_external_descriptor" | tee /tmp/.bdk_change_descriptor

[group("BDK electrum")]
[doc("Send a command to bdk example_electrum")]
[positional-arguments]
bdk_electrum COMMAND="help" *ARGS="":
  #!/usr/bin/env bash
  short_date=$(/bin/date +%m%d%y)
  exec {BASH_XTRACEFD}>>"$DEBUG_PREFIX.$short_date".log
  set -euxo pipefail
  export DESCRIPTOR=$(cat /tmp/.bdk_descriptor)
  export CHANGE_DESCRIPTOR=$(cat /tmp/.bdk_change_descriptor)
  export NETWORK="regtest"
  cargo -q run --bin example_electrum {{COMMAND}} {{ARGS}}

[group("BDK electrum")]
[doc("Mine <BLOCKS> to a new wallet address from electrum example db.")]
bdk_fund_electrum BLOCKS="1":
  #!/usr/bin/env bash
  short_date=$(/bin/date +%m%d%y)
  exec {BASH_XTRACEFD}>>"$DEBUG_PREFIX.$short_date".log
  set -euxo pipefail
  export ADDRESS=$(just bdk_electrum address next | jq -r ".address")
  just mine {{BLOCKS}} $ADDRESS

[group("BDK silentpayments")]
[doc("Send a command to bdk example_silentpayments")]
[positional-arguments]
bdk_sp COMMAND="help" *ARGS="":
  #!/usr/bin/env bash
  short_date=$(/bin/date +%m%d%y)
  exec {BASH_XTRACEFD}>>"$DEBUG_PREFIX.$short_date".log
  set -euxo pipefail
  export DESCRIPTOR=$(cat /tmp/.bdk_descriptor)
  export CHANGE_DESCRIPTOR=$(cat /tmp/.bdk_change_descriptor)
  export RPC_URL=http://127.0.0.1:18443
  export RPC_USER=__cookie__
  export RPC_PASS=$(just cookie)
  cargo -q run --bin example_silentpayments {{COMMAND}} {{ARGS}}

[group("BDK bitcoindrpc")]
[doc("Send a command to bdk example_bitcoind_rpc_polling")]
[positional-arguments]
bdk_rpc COMMAND="help" *ARGS="":
  #!/usr/bin/env bash
  short_date=$(/bin/date +%m%d%y)
  exec {BASH_XTRACEFD}>>"$DEBUG_PREFIX.$short_date".log
  set -euxo pipefail
  export DESCRIPTOR=$(cat /tmp/.bdk_descriptor)
  export CHANGE_DESCRIPTOR=$(cat /tmp/.bdk_change_descriptor)
  export NETWORK="regtest"
  export RPC_URL=http://127.0.0.1:18443
  export RPC_USER=__cookie__
  export RPC_PASS=$(just cookie)
  cargo -q run --bin example_bitcoind_rpc_polling {{COMMAND}} {{ARGS}}

[group("BDK flows")]
[doc("Send a command to bdk example cli")]
[positional-arguments]
bdk_sp_send *ARGS="":
  #!/usr/bin/env bash
  short_date=$(/bin/date +%m%d%y)
  exec {BASH_XTRACEFD}>>"$DEBUG_PREFIX.$short_date".log
  set -euxo pipefail
  echo "Synchronize wallet to detect spend transaction outputs"
  FAKE_ADDRESS=$(just bdk_electrum address next | jq -r ".address")
  SAT_AMOUNT=10000
  ORIGINAL_PSBT=$(just bdk_electrum psbt new $SAT_AMOUNT $FAKE_ADDRESS | jq -r ".psbt")
  echo "Original PSBT: $ORIGINAL_PSBT"
  SP_PSBT=$(just bdk_sp to-silent-payment --psbt $ORIGINAL_PSBT | jq -r ".psbt")
  echo "PSBT with P2TR single output replaced by Silent Payment Code derived output: $SP_PSBT"
  SIGNED_SP_PSBT=$(just bdk_electrum psbt sign --psbt $SP_PSBT | jq -r ".psbt")
  echo "Signed PSBT with silent payment output: $SIGNED_SP_PSBT"
  SP_TX=$(just bdk_electrum psbt extract $SIGNED_SP_PSBT -b | jq -r ".broadcasted_tx")
  echo "Broadcasted txid: $SP_TX"
  just mine 1
  just bdk_sp scan

[group("BDK flows")]
bdk_sp_indexer_flow:
  #!/usr/bin/env bash
  short_date=$(/bin/date +%m%d%y)
  exec {BASH_XTRACEFD}>>"$DEBUG_PREFIX.$short_date".log
  set -euxo pipefail
  if  [ -f ./.bdk_example_electrum.db ]; then
    rm -rf .bdk_example_electrum.db;
  fi
  just start
  just bdk_init
  just bdk_electrum init
  just bdk_fund_electrum 101
  sleep 20
  just bdk_electrum scan
  just bdk_electrum sync
  just bdk_sp_send
  just stop
  rm -rf .bdk_example_electrum.db
